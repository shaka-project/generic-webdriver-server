name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      # Write to "contents" is needed to create a release
      contents: write
      # Write to pull-requests is needed to create and update the release PR
      pull-requests: write

    steps:
      # Create/update release PR
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          # These are the necessary parameters for releasing multiple packages
          # from a single repo.
          command: manifest
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          monorepo-tags: true

      - name: Compute tag name
        id: compute
        if: steps.release.outputs.releases_created
        run: |
          # For a monorepo, there may be multiple tags, so outputs.tag_name is
          # only used for releases of the root component.  To get the tag name
          # generally, we need to check outputs.paths_released, and possibly
          # use that to construct the tag name.  This seems like a major
          # failing of release-please-action, which could have a simple output
          # with an arbitrary tag name for situations like this.
          json="${{ toJSON(steps.release.outputs) }}"
          # This is a tag from the root component, if any.
          tag_name=$(echo "$json" | jq -r .tag_name)
          if [[ "$tag_name" == "" ]]; then
            # We don't care about every single tag.  We just care about one tag
            # so we can check out the appropriate code from the repo.  So grab
            # path [0].
            path=$(echo "$json" | jq -r .paths_released[0])
            tag_name=$(echo "$json" | jq -r ".$path--tag_name")
          fi
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ steps.compute.outputs.tag_name }}
          persist-credentials: false
        if: steps.release.outputs.releases_created

      - name: Setup Node.js
        if: steps.release.outputs.releases_created
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Publish all changed packages
        if: steps.release.outputs.releases_created
        run: |
          npm ci
          npm --prefix base ci

          for i in base backends/*; do
            PACKAGE=$(jq -r .name < "$i"/package.json)
            PRIVATE=$(jq -r .private < "$i"/package.json)

            if [[ "$PRIVATE" == "true" ]]; then
              echo "Skipping $i ($PACKAGE is private)"
              continue
            fi

            SOURCE_VERSION=$(jq -r .version < "$i"/package.json)
            LAST_PUBLISHED=$(npm view "$PACKAGE" version 2>/dev/null)

            if [[ "$LAST_PUBLISHED" == "$SOURCE_VERSION" ]]; then
              echo "Skipping $i ($PACKAGE $SOURCE_VERSION is up-to-date)"
              continue
            fi

            echo "Publishing $i ($PACKAGE $SOURCE_VERSION replacing $LAST_PUBLISHED)"

            # NOTE: Using npm --prefix _DOES NOT_ seem to work with publish
            # here.  So we use pushd/popd instead.
            set -e
            pushd "$i"

            npm ci
            npm publish

            popd
            set +e
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
